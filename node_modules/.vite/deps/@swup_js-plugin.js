import {
  f,
  h
} from "./chunk-MN2DZ6HL.js";
import "./chunk-76J2PTFD.js";

// node_modules/@swup/plugin/dist/index.modern.js
function r() {
  return r = Object.assign ? Object.assign.bind() : function(r2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var e2 = arguments[n2];
      for (var t in e2)
        Object.prototype.hasOwnProperty.call(e2, t) && (r2[t] = e2[t]);
    }
    return r2;
  }, r.apply(this, arguments);
}
var n = (r2) => String(r2).split(".").map((r3) => String(parseInt(r3 || "0", 10))).concat(["0", "0"]).slice(0, 3).join(".");
var e = class {
  constructor() {
    this.isSwupPlugin = true, this.swup = void 0, this.version = void 0, this.requires = {}, this.handlersToUnregister = [];
  }
  mount() {
  }
  unmount() {
    this.handlersToUnregister.forEach((r2) => r2()), this.handlersToUnregister = [];
  }
  _beforeMount() {
    if (!this.name)
      throw new Error("You must define a name of plugin when creating a class.");
  }
  _afterUnmount() {
  }
  _checkRequirements() {
    return "object" != typeof this.requires || Object.entries(this.requires).forEach(([r2, e2]) => {
      if (!function(r3, e3, t) {
        const s = function(r4, n2) {
          var e4;
          if ("swup" === r4)
            return null != (e4 = n2.version) ? e4 : "";
          {
            var t2;
            const e5 = n2.findPlugin(r4);
            return null != (t2 = null == e5 ? void 0 : e5.version) ? t2 : "";
          }
        }(r3, t);
        return !!s && ((r4, e4) => e4.every((e5) => {
          const [, t2, s2] = e5.match(/^([\D]+)?(.*)$/) || [];
          var o2, i;
          return ((r5, n2) => {
            const e6 = { "": (r6) => 0 === r6, ">": (r6) => r6 > 0, ">=": (r6) => r6 >= 0, "<": (r6) => r6 < 0, "<=": (r6) => r6 <= 0 };
            return (e6[n2] || e6[""])(r5);
          })((i = s2, o2 = n(o2 = r4), i = n(i), o2.localeCompare(i, void 0, { numeric: true })), t2 || ">=");
        }))(s, e3);
      }(r2, e2 = Array.isArray(e2) ? e2 : [e2], this.swup)) {
        const n2 = `${r2} ${e2.join(", ")}`;
        throw new Error(`Plugin version mismatch: ${this.name} requires ${n2}`);
      }
    }), true;
  }
  on(r2, n2, e2 = {}) {
    var t;
    n2 = !(t = n2).name.startsWith("bound ") || t.hasOwnProperty("prototype") ? n2.bind(this) : n2;
    const s = this.swup.hooks.on(r2, n2, e2);
    return this.handlersToUnregister.push(s), s;
  }
  once(n2, e2, t = {}) {
    return this.on(n2, e2, r({}, t, { once: true }));
  }
  before(n2, e2, t = {}) {
    return this.on(n2, e2, r({}, t, { before: true }));
  }
  replace(n2, e2, t = {}) {
    return this.on(n2, e2, r({}, t, { replace: true }));
  }
  off(r2, n2) {
    return this.swup.hooks.off(r2, n2);
  }
};

// node_modules/@swup/js-plugin/dist/index.modern.js
function o() {
  return o = Object.assign ? Object.assign.bind() : function(t) {
    for (var i = 1; i < arguments.length; i++) {
      var n2 = arguments[i];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t[o2] = n2[o2]);
    }
    return t;
  }, o.apply(this, arguments);
}
var a = class extends e {
  constructor(t) {
    var i;
    super(), i = this, this.name = "SwupJsPlugin", this.requires = { swup: ">=4" }, this.defaults = { animations: [{ from: "(.*)", to: "(.*)", out: (t2) => t2(), in: (t2) => t2() }], matchOptions: {} }, this.options = void 0, this.animations = [], this.awaitInAnimation = async function(t2, { skip: n2 }) {
      if (n2)
        return;
      const o2 = i.getBestAnimationMatch(t2);
      await i.createAnimationPromise(o2, t2, "in");
    }, this.awaitOutAnimation = async function(t2, { skip: n2 }) {
      if (n2)
        return;
      const o2 = i.getBestAnimationMatch(t2);
      await i.createAnimationPromise(o2, t2, "out");
    }, Array.isArray(t) && (t = { animations: t }), this.options = o({}, this.defaults, t), this.animations = this.compileAnimations();
  }
  mount() {
    this.replace("animation:in:await", this.awaitInAnimation, { priority: -1 }), this.replace("animation:out:await", this.awaitOutAnimation, { priority: -1 });
  }
  compileAnimations() {
    return this.options.animations.map((t) => o({}, t, { matchesFrom: h(t.from, this.options.matchOptions), matchesTo: h(t.to, this.options.matchOptions) }));
  }
  createAnimationPromise(t, i, o2) {
    const a2 = t ? t[o2] : null;
    if (!t || !a2)
      return console.warn("No animation found"), Promise.resolve();
    const s = t.matchesFrom(i.from.url), r2 = t.matchesTo(i.to.url), e2 = { visit: i, direction: o2, from: { url: i.from.url, pattern: t.from, params: s ? s.params : {} }, to: { url: i.to.url, pattern: t.to, params: r2 ? r2.params : {} } };
    return new Promise((t2) => {
      const i2 = a2(() => t2(), e2);
      f(i2) && i2.then(t2);
    });
  }
  getBestAnimationMatch(t) {
    let i = 0;
    return this.animations.reduceRight((n2, o2) => {
      const a2 = this.rateAnimation(t, o2);
      return a2 >= i ? (i = a2, o2) : n2;
    }, null);
  }
  rateAnimation(t, i) {
    const n2 = t.to.url, o2 = t.animation.name;
    let a2 = 0;
    const s = i.matchesFrom(t.from.url);
    return s && (a2 += 1), i.matchesTo(n2) && (a2 += 1), s && i.to === o2 && (a2 += 2), a2;
  }
};
export {
  a as default
};
//# sourceMappingURL=@swup_js-plugin.js.map
