{
  "version": 3,
  "sources": ["../../@swup/plugin/src/versionSatisfies.ts", "../../@swup/plugin/src/index.ts", "../../@swup/plugin/src/pluginRequirements.ts", "../../@swup/js-plugin/src/index.ts"],
  "sourcesContent": ["type Comparator = '>' | '>=' | '<' | '<=';\n\n// Fill versions to exactly 3 decimals\nexport const normalizeVersion = (version: string): string => {\n\treturn String(version)\n\t\t.split('.')\n\t\t.map(segment => String(parseInt(segment || '0', 10)))\n\t\t.concat(['0', '0'])\n\t\t.slice(0, 3)\n\t\t.join('.');\n};\n\n// Numerically compare version strings after normalizing them\nexport const compareVersion = (a: string, b: string): number => {\n\ta = normalizeVersion(a);\n\tb = normalizeVersion(b);\n\treturn a.localeCompare(b, undefined, { numeric: true });\n};\n\n// Apply a comparator (equals, greater-than, etc) by its symbol to a sort comparison\nconst applyComparator = (comparisonResult: number, comparator: Comparator) => {\n\tconst comparators = {\n\t\t'': (r: number) => r === 0,\n\t\t'>': (r: number) => r > 0,\n\t\t'>=': (r: number) => r >= 0,\n\t\t'<': (r: number) => r < 0,\n\t\t'<=': (r: number) => r <= 0\n\t};\n\tconst comparatorFn = comparators[comparator] || comparators[''];\n\treturn comparatorFn(comparisonResult);\n};\n\n/**\n * Check if a version satisfies all given version requirements\n *\n * versionSatisfies('2.1.0', ['>=2', '<4']) // true\n * versionSatisfies('2.1.0', ['5']) // false\n *\n * @param {string} installed Installed version\n * @param {Array.<string>} requirements Array of requirements that must be satisfied\n * @returns boolean\n */\nexport const versionSatisfies = (installed: string, requirements: string[]) => {\n\treturn requirements.every((required) => {\n\t\tconst [, comparator, version] = required.match(/^([\\D]+)?(.*)$/) || [];\n\t\tconst comparisonResult = compareVersion(installed, version);\n\t\treturn applyComparator(comparisonResult, (comparator as Comparator) || '>=');\n\t});\n};\n", "import type Swup from 'swup';\nimport type { Plugin, HookName, HookOptions, HookUnregister, Handler } from 'swup';\nimport { checkDependencyVersion } from './pluginRequirements.js';\n\nfunction isBound(func: Function) {\n\treturn func.name.startsWith('bound ') && !func.hasOwnProperty('prototype');\n}\n\nexport default abstract class SwupPlugin implements Plugin {\n\t/** Name of the plugin */\n\tabstract name: string;\n\n\t/** Identify as a swup plugin */\n\tisSwupPlugin: true = true;\n\n\t// Swup instance, assigned by swup itself\n\tswup: Swup;\n\t/** Version of this plugin. Currently not in use, defined here for backward compatiblity. */\n\tversion?: string;\n\n\t/** Version requirements of this plugin. Example: `{ swup: '>=4' }` */\n\trequires?: Record<string, string | string[]> = {};\n\n\t// List of hook handlers to unregister on unmount\n\tprivate handlersToUnregister: HookUnregister[] = [];\n\n\t/** Run on mount */\n\tmount() {\n\t\t// this is mount method rewritten by class extending\n\t\t// and is executed when swup is enabled with plugin\n\t}\n\n\t/** Run on unmount */\n\tunmount() {\n\t\t// this is unmount method rewritten by class extending\n\t\t// and is executed when swup with plugin is disabled\n\n\t\t// Unsubscribe all registered hook handlers\n\t\tthis.handlersToUnregister.forEach((unregister) => unregister());\n\t\tthis.handlersToUnregister = [];\n\t}\n\n\t_beforeMount(): void {\n\t\tif (!this.name) {\n\t\t\tthrow new Error('You must define a name of plugin when creating a class.');\n\t\t}\n\t}\n\n\t_afterUnmount(): void {\n\t\t// here for any future hidden auto-cleanup\n\t}\n\n\t_checkRequirements(): boolean {\n\t\tif (typeof this.requires !== 'object') {\n\t\t\treturn true;\n\t\t}\n\n\t\tObject.entries(this.requires).forEach(([dependency, versions]) => {\n\t\t\tversions = Array.isArray(versions) ? versions : [versions];\n\t\t\tif (!checkDependencyVersion(dependency, versions, this.swup)) {\n\t\t\t\tconst requirement = `${dependency} ${versions.join(', ')}`;\n\t\t\t\tthrow new Error(`Plugin version mismatch: ${this.name} requires ${requirement}`);\n\t\t\t}\n\t\t});\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Register a new hook handler.\n\t *\n\t * On plugin unmount, the handler will automatically be unregistered.\n\t * The handler function is lexically bound to the plugin instance for convenience.\n\t * @see swup.hooks.on\n\t */\n\tprotected on<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\thandler = !isBound(handler) ? handler.bind(this) : handler;\n\t\tconst unregister = this.swup.hooks.on(hook, handler, options);\n\t\tthis.handlersToUnregister.push(unregister);\n\t\treturn unregister;\n\t}\n\n\tprotected once<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, once: true });\n\t}\n\n\tprotected before<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, before: true });\n\t}\n\n\tprotected replace<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, replace: true });\n\t}\n\n\tprotected off<T extends HookName>(hook: T, handler?: Handler<T>): void {\n\t\treturn this.swup.hooks.off(hook, handler!);\n\t}\n}\n", "import type Swup from 'swup';\n\nimport { versionSatisfies } from './versionSatisfies.js';\n\nfunction getInstalledDependencyVersion(dependency: string, swup: Swup): string {\n\tif (dependency === 'swup') {\n\t\treturn swup.version ?? '';\n\t} else {\n\t\t// Circular type dependency?\n\t\t// findPlugin returns swup's Plugin type which is not up-to-date\n\t\t// with the actual Plugin type from index.ts\n\t\tconst plugin = swup.findPlugin(dependency);\n\t\treturn plugin?.version ?? '';\n\t}\n}\n\nexport function checkDependencyVersion(\n\tdependency: string,\n\trequirements: string[],\n\tswup: Swup\n): boolean {\n\tconst version = getInstalledDependencyVersion(dependency, swup);\n\tif (version) {\n\t\treturn versionSatisfies(version, requirements);\n\t} else {\n\t\treturn false;\n\t}\n}\n", "import Plugin from '@swup/plugin';\nimport { matchPath, isPromise, Visit, Handler } from 'swup';\n\ntype RequireKeys<T, K extends keyof T> = Partial<T> & Pick<T, K>;\n\ntype Animation = {\n\t/** The path pattern to match the current url against. */\n\tfrom: string;\n\t/** The path pattern to match the next url against. */\n\tto: string;\n\t/** The function to call when the animation is triggered. */\n\tout: (done: () => void, data: AnimationData) => void | Promise<void>;\n\t/** The function to call when the animation is triggered. */\n\tin: (done: () => void, data: AnimationData) => void | Promise<void>;\n};\n\ntype CompiledAnimation = Animation & {\n\t/** Match function to check if the `from` pattern matches a given URL */\n\tmatchesFrom: MatchFunction;\n\t/** Match function to check if the `to` pattern matches a given URL */\n\tmatchesTo: MatchFunction;\n};\n\ntype AnimationData = {\n\tvisit: Visit;\n\tdirection: 'in' | 'out';\n\tfrom: {\n\t\turl: string;\n\t\tpattern: string;\n\t\tparams: object;\n\t};\n\tto: {\n\t\turl: string;\n\t\tpattern: string;\n\t\tparams: object;\n\t};\n};\n\ntype MatchOptions = Parameters<typeof matchPath>[1];\ntype MatchFunction = ReturnType<typeof matchPath>;\n\ntype Options = {\n\t/** The selector for matching the main content area of the page. */\n\tanimations: Animation[];\n\t/** Options for matching paths. Directly passed into `path-to-regexp`. */\n\tmatchOptions: MatchOptions;\n};\n\ntype InitOptions = RequireKeys<Options, 'animations'>;\n\nexport default class SwupJsPlugin extends Plugin {\n\tname = 'SwupJsPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: Options = {\n\t\tanimations: [\n\t\t\t{\n\t\t\t\tfrom: '(.*)',\n\t\t\t\tto: '(.*)',\n\t\t\t\tout: (done) => done(),\n\t\t\t\tin: (done) => done()\n\t\t\t}\n\t\t],\n\t\tmatchOptions: {}\n\t};\n\toptions: Options;\n\n\tanimations: CompiledAnimation[] = [];\n\n\tconstructor(options: InitOptions) {\n\t\tsuper();\n\n\t\t// Backward compatibility\n\t\tif (Array.isArray(options)) {\n\t\t\toptions = { animations: options as Animation[] };\n\t\t}\n\n\t\tthis.options = { ...this.defaults, ...options };\n\t\tthis.animations = this.compileAnimations();\n\t}\n\n\tmount() {\n\t\tthis.replace('animation:in:await', this.awaitInAnimation, { priority: -1 });\n\t\tthis.replace('animation:out:await', this.awaitOutAnimation, { priority: -1 });\n\t}\n\n\t// Compile path patterns to match functions and transitions\n\tcompileAnimations(): CompiledAnimation[] {\n\t\treturn this.options.animations.map((animation): CompiledAnimation => {\n\t\t\tconst matchesFrom = matchPath(animation.from, this.options.matchOptions);\n\t\t\tconst matchesTo = matchPath(animation.to, this.options.matchOptions);\n\t\t\treturn { ...animation, matchesFrom, matchesTo };\n\t\t});\n\t}\n\n\tawaitInAnimation: Handler<'animation:in:await'> = async (visit, { skip }) => {\n\t\tif (skip) return;\n\t\tconst animation = this.getBestAnimationMatch(visit);\n\t\tawait this.createAnimationPromise(animation, visit, 'in');\n\t};\n\n\tawaitOutAnimation: Handler<'animation:out:await'> = async (visit, { skip }) => {\n\t\tif (skip) return;\n\t\tconst animation = this.getBestAnimationMatch(visit);\n\t\tawait this.createAnimationPromise(animation, visit, 'out');\n\t};\n\n\tcreateAnimationPromise(\n\t\tanimation: CompiledAnimation | null,\n\t\tvisit: Visit,\n\t\tdirection: 'in' | 'out'\n\t): Promise<void> {\n\t\tconst animationFn = animation ? animation[direction] : null;\n\t\tif (!animation || !animationFn) {\n\t\t\tconsole.warn('No animation found');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst matchFrom = animation.matchesFrom(visit.from.url);\n\t\tconst matchTo = animation.matchesTo(visit.to.url!);\n\n\t\tconst paramsFrom = matchFrom ? matchFrom.params : {};\n\t\tconst paramsTo = matchTo ? matchTo.params : {};\n\n\t\tconst data = {\n\t\t\tvisit,\n\t\t\tdirection,\n\t\t\tfrom: {\n\t\t\t\turl: visit.from.url,\n\t\t\t\tpattern: animation.from,\n\t\t\t\tparams: paramsFrom\n\t\t\t},\n\t\t\tto: {\n\t\t\t\turl: visit.to.url!,\n\t\t\t\tpattern: animation.to,\n\t\t\t\tparams: paramsTo\n\t\t\t}\n\t\t};\n\n\t\treturn new Promise((resolve) => {\n\t\t\tconst result = animationFn(() => resolve(), data);\n\t\t\tif (isPromise(result)) {\n\t\t\t\tresult.then(resolve);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetBestAnimationMatch(visit: Visit): CompiledAnimation | null {\n\t\tlet topRating = 0;\n\n\t\tconst animation: CompiledAnimation | null = this.animations.reduceRight(\n\t\t\t(bestMatch, animation) => {\n\t\t\t\tconst rating = this.rateAnimation(visit, animation);\n\t\t\t\tif (rating >= topRating) {\n\t\t\t\t\ttopRating = rating;\n\t\t\t\t\treturn animation;\n\t\t\t\t} else {\n\t\t\t\t\treturn bestMatch;\n\t\t\t\t}\n\t\t\t},\n\t\t\tnull as CompiledAnimation | null\n\t\t);\n\n\t\treturn animation;\n\t}\n\n\trateAnimation(visit: Visit, animation: CompiledAnimation): number {\n\t\tconst from = visit.from.url;\n\t\tconst to = visit.to.url!;\n\t\tconst name = visit.animation.name;\n\n\t\tlet rating = 0;\n\n\t\t// check if route patterns match\n\t\tconst fromMatched = animation.matchesFrom(from);\n\t\tconst toMatched = animation.matchesTo(to);\n\t\tif (fromMatched) {\n\t\t\trating += 1;\n\t\t}\n\t\tif (toMatched) {\n\t\t\trating += 1;\n\t\t}\n\n\t\t// beat all others if custom name fits\n\t\tif (fromMatched && animation.to === name) {\n\t\t\trating += 2;\n\t\t}\n\n\t\treturn rating;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["normalizeVersion", "version", "String", "split", "map", "segment", "parseInt", "concat", "slice", "join", "SwupPlugin", "isSwupPlugin", "this", "swup", "requires", "handlersToUnregister", "mount", "unmount", "forEach", "unregister", "_beforeMount", "name", "Error", "_afterUnmount", "_checkRequirements", "Object", "entries", "dependency", "versions", "checkDependencyVersion", "requirements", "_plugin$version", "e", "findPlugin", "plugin", "installed", "every", "required", "comparator", "match", "a", "b", "comparisonResult", "comparators", "r", "localeCompare", "numeric", "Array", "isArray", "requirement", "on", "hook", "handler", "options", "func", "startsWith", "hasOwnProperty", "bind", "hooks", "push", "once", "_extends", "before", "replace", "off", "SwupJsPlugin", "Plugin", "constructor", "options", "_this", "super", "this", "name", "requires", "swup", "defaults", "animations", "from", "to", "out", "done", "in", "matchOptions", "awaitInAnimation", "async", "visit", "skip", "animation", "getBestAnimationMatch", "createAnimationPromise", "awaitOutAnimation", "Array", "isArray", "_extends", "compileAnimations", "mount", "replace", "priority", "map", "matchesFrom", "matchPath", "matchesTo", "direction", "animationFn", "console", "warn", "Promise", "resolve", "matchFrom", "url", "matchTo", "data", "pattern", "params", "result", "isPromise", "then", "topRating", "reduceRight", "bestMatch", "rating", "rateAnimation", "fromMatched"]
}
